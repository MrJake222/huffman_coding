2	0	AWK	AWK – interpretowany język programowania, którego główną funkcją jest wyszukiwanie i przetwarzanie wzorców w plikach lub strumieniach danych. Jest także nazwą programu początkowo dostępnego dla systemów operacyjnych będących pochodnymi UNIX-a, obecnie także na inne platformy. AWK jest językiem, który w znacznym stopniu wykorzystuje tablice asocjacyjne, stringi i wyrażenia regularne. Nazwa języka pochodzi od pierwszych liter nazwisk jego autorów Alfreda V. Aho, Petera Weinbergera i Briana Kernighana i czasami jest zapisywana małymi literami oraz odczytywana jako jedno słowo awk. Definicja języka AWK jest zawarta w POSIX 1003.2 Command Language And Utilities Standard.
2	1	AWK	Wersja ta jest z kolei oparta na opisie z The AWK Programming Language napisanym przez Aho, Weinbergera i Kernighana, z dodatkowymi właściwościami zdefiniowanymi w wersji awk z SVR4. W wierszu poleceń podaje się opcje dla awk, tekst programu (jeśli nie podano go poprzez opcję  -f   lub  --file  ) i wartości, które mają być udostępnione w predefiniowanych zmiennych  ARGC   i  ARGV  . Struktura programów AWK   „AWK jest językiem służącym do przetwarzania plików tekstowych. Plik jest traktowany jako ciąg rekordów, przy czym domyślnie rekordem jest każdy wiersz.
2	2	AWK	Każda linia jest podzielona na pola, więc można traktować pierwsze pole linii jako pierwsze słowo, drugie pole jako drugie słowo itd. Program AWK składa się z sekwencji instrukcji wzorzec-akcja. AWK czyta wejście linia po linii. Każda linia jest przeszukiwana pod kątem wzorców występujących w programie i dla każdego pasującego wzorca wykonywana jest akcja z nim skojarzona.” – Alfred V. Aho        Program AWK składa się z sekwencji instrukcji wzorzec-akcja oraz opcjonalnych definicji funkcji. wzorzec { instrukcje akcji } function nazwa(lista parametrów) { instrukcje } gdzie  wzorzec   to zwykle jakieś wyrażenie, a  akcja   – lista komend.
2	3	AWK	Wejście dzielone jest na rekordy, domyślnie oddzielone znakiem nowej linii. Dla każdego rekordu wejścia awk dokonuje porównania, sprawdzając czy odpowiada on jakiemuś wzorcowi z programu AWK. Jeśli wzorzec będzie odpowiadał rekordowi, zostanie wykonana związana z nim akcja. Wzorce są sprawdzane w kolejności ich pojawienia się w programie. Domyślną akcją jest wypisanie rekordu. Komendy i składnia Na komendy AWK składają się wywołania funkcji, nadawanie wartości zmiennym, obliczenia lub jakaś kombinacja wymienionych zadań. AWK posiada wbudowane wsparcie dla wielu funkcji. Niektóre wersje pozwalają na dynamiczne linkowanie bibliotek, co umożliwia korzystanie z jeszcze większej liczby funkcji.
2	4	AWK	Dla uproszczenia nawiasy klamrowe ( {}  ) w poniższych przykładach zostaną pominięte.  print   Polecenie  print   jest używane do wypisywania tekstu. Wyjście jest zawsze zakończone predefiniowanym separatorem rekordów (output record separator (ORS)), który domyślnie jest znakiem nowej linii. Najprostsze zastosowanie polecenia  print   to:  print   Wyświetla zawartość obecnego rekordu. W AWK rekordy rozbijane są na pola, które można wyświetlić osobno:  print $1   Wyświetla pierwsze pole obecnego rekordu.  print $1, $3   Wyświetla pierwsze i trzecie pole obecnego rekordu oddzielone separatorem pola (output field separator (OFS)) – domyślnie spacją.
2	5	AWK	Choć zapis pól ( $X  ) może kojarzyć się z zapisem określającym zmienne (jak np. w perlu), to jednak określa pola bieżącego rekordu. Ponadto  $0   odnosi się do całego rekordu, więc  print   oraz  print $0   mają takie samo działanie.  print   pozwala również wyświetlić wynik obliczeń lub wywołania funkcji. Np. print 3+2 print foobar(3) print foobar(zmienna) print sin(3-2) Wyjście można również przekierować do pliku: print wyrażenie nazwa pliku Lub do innej komendy przez użycie pipe'a: print wyrażenie komenda Zmienne i tablice Zmienne Zmienne AWK są dynamiczne — zaczynają istnieć, gdy są po raz pierwszy użyte.
2	6	AWK	Nazwy zmiennych mogą zawierać znaki z zakresu , lecz nie mogą być słowami kluczowymi. Zmienne oraz pola mogą być liczbami (zmiennoprzecinkowymi), łańcuchami lub jednym i drugim naraz. Interpretacja wartości zmiennej zależy od kontekstu. Jeśli jest użyta w wyrażeniu numerycznym, jest interpretowana jako liczba. Natomiast jeśli jest użyta w wyrażeniu łańcuchowym — jest traktowana jak łańcuch. AWK posiada tablice jednowymiarowe. Symulowane mogą być również tablice wielowymiarowe. Podczas działania programu ustawianych jest kilka predefiniowanych zmiennych opisanych niżej. Zmienne wbudowane Zmienne wbudowane w AWK to m.in. zmienne określające pola:  $1  ,  $2   itd.
2	7	AWK	Zwracają one wartość lub tekst przechowywany aktualnie w określonym polu rekordu. Poza nimi AWK posiada również inne zmienne: Tablice Tablice są indeksowane wyrażeniem ujętym w nawiasy kwadratowe (   ). Jeśli wyrażenie jest listą wyrażeń (wyrażenie, wyrażenie, ...), to indeks tablicy jest sklejany z wartości (łańcuchowych) każdego wyrażenia, oddzielonych wartością zmiennej  SUBSEP  . Jest tak dlatego, że AWK posiada wyłącznie tablice asocjacyjne, zaś klucze numeryczne pamiętane są jako łańcuchy. Symulowanie tablic wielowymiarowych polega na sklejaniu poszczególnych indeksów w unikalny łańcuch.
2	8	AWK	Na przykład:   lang awk i A ; j B ; k C x hello, world\n   przypisuje łańcuch hello, world\n elementowi tablicy  x  , o indeksie będącym łańcuchem A\034B\034C. Jeśli tablica posiada wielokrotne indeksy, można użyć konstrukcji  (i, j) in array  . Element można skasować z tablicy przy użyciu polecenia  delete  . Poleceniem  delete   można się też posłużyć do skasowania całej zawartości tablicy, przez podanie jej nazwy bez indeksu.
2	9	AWK	Funkcje Funkcje są wykonywane po wywołaniu ich z wyrażeń występujących we wzorcach lub akcjach. Definicja funkcji składa się ze słowa kluczowego  function  , jej nazwy, argumentów i ciała. Poniżej znajduje się przykład funkcji:   lang awkfunction dodaj_siedem (liczba) { return liczba + 7 }   Tę funkcję można wywołać w następujący sposób:   lang awkprint dodaj_siedem(51) # zwraca 58   Między nazwą funkcji, a nawiasem otwierającym można wstawić spację jedynie podczas jej deklaracji – w wywołaniu nawias musi stać bezpośrednio po nazwie funkcji.
2	10	AWK	Ma to na celu zapobieżenie niejednoznaczności składni z operatorem konkatenacji (łączenia). Ograniczenie to nie odnosi się do funkcji wbudowanych. Funkcje mogą posiadać zmienne lokalne. Ich nazwy dodawane są na końcu listy argumentów w definicji funkcji. Jednak ich wartości powinno się pomijać wywołując daną funkcję. Zazwyczaj przed deklaracją zmiennych lokalnych dodaje się kilka białych znaków, by wskazać miejsce, w którym kończą się argumenty funkcji i zaczynają zmienne lokalne. Zamiast słowa  function   można używać słowa  funct  . Operatory Operatory w AWK, w kolejności malejącego priorytetu, to: Wywołanie programu AWK Tekst programu czytany jest tak, jakby wszystkie pliki programu zostały połączone ze sobą w całość, przy czym pierwszeństwo mają pliki podane jako argumenty polecenia.
2	11	AWK	Przydaje się to do budowania bibliotek funkcji AWK, bez konieczności włączania ich do każdego nowego programu AWK, który z nich korzysta. Umożliwia to również łączenie funkcji bibliotecznych z programami z wiersza poleceń. Zmienna środowiskowa  AWKPATH   określa ścieżkę przeszukiwania, używaną do znajdowania plików źródłowych podanych w opcji  -f  . Jeśli zmienna ta nie istnieje, domyślną ścieżką staje się  .: usr local share awk  . (Faktyczny katalog może być różny, zależnie od tego jak skompilowano i zainstalowano awk).
2	12	AWK	Jeśli nazwa pliku, podana opcji  -f   zawiera znak     , nie jest dokonywane żadne przeszukiwanie ścieżki. Program AWK wykonywany jest w następującej kolejności: inicjalizacja zmiennych podanych w opcjach  -v  , kompilacja do postaci wewnętrznej, wywołanie kodu zawartego w blokach  BEGIN   (o ile istnieją), odczytywanie plików podanych w tablicy  ARGV  , odczytywanie standardowego wejścia, jeśli pliki nie zostały podane. Z poziomu wiersza poleceń można także ustawić wartość zmiennej, podając zamiast nazwy pliku ciąg  zmienna wartość  .
2	13	AWK	Ten sposób inicjalizowania zmiennych najbardziej przydaje się do dynamicznego nadawania wartości zmiennym, których AWK używa do określania sposobu, w jaki wejście rozbijane jest na pola i rekordy. Jest też użyteczny do kontroli stanu, jeśli zachodzi potrzeba wielokrotnego czytania danego pliku danych. Jeśli wartość konkretnego elementu  ARGV   jest pusta (), to awk ją pomija. Przykłady zastosowań Hello World Poniżej znajduje się przykład programu Hello world napisanego w AWK:   lang awkBEGIN { print Hello, world! }   Niekoniecznie trzeba w tym wypadku pisać na końcu  exit  .
2	14	AWK	Jedynym wzorcem jest  BEGIN  , więc żadne argumenty z linii komend nie są przetwarzane. W niektórych wersjach AWK i niektórych krajach dodanie znaku ”_“ przed łańcuchem znaków wypisze go w języku narodowym. Np.   lang awkBEGIN { print _Hello, world! }   we Francji może wypisać bonjour, monde!. Wypisywanie linii zawierających więcej niż 80 znaków   lang awk length($0) 80    Zliczanie liczby słów Program liczy liczbę słów na wejściu i wypisuje liczbę słów, linii i znaków podanych na wejściu (podobnie jak wc).
2	15	AWK	lang awk { w + NF c + length + 1 } END { print NR, w, c }   Ze względu na brak wzorca w pierwszej linii programu akcja jest wykonywana dla każdego wiersza wejścia. Suma numerów ostatnich słów   lang awk{ s + $NF } END { print s + 0 }    s   jest zwiększane o numer ostatniego słowa w każdym rekordzie. Na końcu wejścia wzorzec  END   pasuje, więc  s   jest wypisywane. Jednak wejście może nie zawierać ani jednej linii.
2	16	AWK	Wtedy, jako że zmiennej  s   nie została nadana żadna wartość, będzie to pusty ciąg. Dodanie zera na końcu przy wypisywaniu  s   wymusza t